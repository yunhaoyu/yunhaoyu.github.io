<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>后端整合 Swagger + Knife4j 接口文档</title>
      <link href="/2023/07/25/%E5%90%8E%E7%AB%AF%E6%95%B4%E5%90%88%20Swagger%20+%20Knife4j%20%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"/>
      <url>/2023/07/25/%E5%90%8E%E7%AB%AF%E6%95%B4%E5%90%88%20Swagger%20+%20Knife4j%20%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="后端整合-Swagger-Knife4j-接口文档"><a href="#后端整合-Swagger-Knife4j-接口文档" class="headerlink" title="后端整合 Swagger + Knife4j 接口文档"></a>后端整合 Swagger + Knife4j 接口文档</h2><p>什么是接口文档？</p><p>   写接口信息的文档，每条接口包括：</p><ul><li><p>请求参数</p></li><li><p>响应参数 </p></li><li><ul><li>错误码</li></ul></li><li><p>接口地址</p></li><li><p>接口名称</p></li><li><p>请求类型</p></li><li><p>请求格式</p></li><li><p>备注</p></li></ul><p>who 谁用？</p><p>  一般是后端或者负责人来提供，后端和前端都要使用</p><p>为什么需要接口文档？</p><ul><li><p>有个书面内容（背书或者归档），便于大家参考和查阅，便于 <strong>沉淀和维护</strong> ，拒绝口口相传</p></li><li><p>接口文档便于前端和后端开发对接，前后端联调的 <strong>介质</strong> 。后端 &#x3D;&gt; 接口文档 &lt;&#x3D; 前端</p></li><li><p>好的接口文档支持在线调试、在线测试，可以作为工具提高我们的开发测试效率</p></li></ul><p>怎么做接口文档？</p><ul><li><p>手写（比如腾讯文档、Markdown 笔记）</p></li><li><p>自动化接口文档生成：自动根据项目代码生成完整的文档或在线调试的网页。Swagger，Postman（侧重接口管理）（国外）；apifox、apipost、eolink（国产）</p></li></ul><p>Swagger 原理：</p><ol><li>引入依赖（Swagger 或 Knife4j：<a href="https://doc.xiaominfo.com/knife4j/documentation/get_start.html%EF%BC%89">https://doc.xiaominfo.com/knife4j/documentation/get_start.html）</a></li><li>自定义 Swagger 配置类</li><li>定义需要生成接口文档的代码位置（Controller）</li><li>千万注意：线上环境不要把接口暴露出去！！！可以通过在 SwaggerConfig 配置文件开头加上 <code>@Profile(&#123;&quot;dev&quot;, &quot;test&quot;&#125;)</code> 限定配置仅在部分环境开启</li><li>启动即可</li><li>可以通过在 controller 方法上添加 <a href="">@Api、@ApiImplicitParam(name </a> &#x3D; “name”,value &#x3D; “姓名”,required &#x3D; true)    <a href="">@ApiOperation(value </a> &#x3D; “向客人问好”) 等注解来自定义生成的接口描述信息</li></ol><p>如果 springboot version &gt;&#x3D; 2.6，需要添加如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">  <span class="attr">pathmatch:</span></span><br><span class="line">      <span class="attr">matching-strategy:</span> <span class="string">ANT_PATH_MATCHER</span></span><br></pre></td></tr></table></figure><h3 id="具体实现步骤"><a href="#具体实现步骤" class="headerlink" title="具体实现步骤:"></a>具体实现步骤:</h3><h4 id="1：在系统中的pom-xml文件中引入Knife4j的依赖包"><a href="#1：在系统中的pom-xml文件中引入Knife4j的依赖包" class="headerlink" title="1：在系统中的pom.xml文件中引入Knife4j的依赖包"></a><strong>1：在系统中的pom.xml文件中引入Knife4j的依赖包</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加knife4j依赖 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.xiaoymin/knife4j-spring-boot-starter --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2：在config目录（没有就新建）下创建Knife4j配置依赖，代码如下："><a href="#2：在config目录（没有就新建）下创建Knife4j配置依赖，代码如下：" class="headerlink" title="2：在config目录（没有就新建）下创建Knife4j配置依赖，代码如下："></a><strong>2：在config目录（没有就新建）下创建Knife4j配置依赖，代码如下：</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuyun.yupao.config;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义 Swagger 接口文档的配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yuyun</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2WebMvc</span></span><br><span class="line"><span class="comment">//@Profile(&#123;&quot;dev&quot;, &quot;test&quot;&#125;)  //限定接口文档仅在部分环境开启，防止接口暴露出去</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Knife4jConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(value = &quot;defaultApi2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">defaultApi2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">// 这里一定要标注你控制器的位置</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.yuyun.yupao.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * api 信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;用户中心&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;用户中心接口文档&quot;</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">&quot;https://github.com/yunhaoyu&quot;</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;yuyun&quot;</span>,<span class="string">&quot;https://github.com/yunhaoyu&quot;</span>,<span class="string">&quot;xxx@qq.com&quot;</span>))</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3：如果-springboot-version-gt-x3D-2-6，在-yml配置文件中进行配置，不然会报错"><a href="#3：如果-springboot-version-gt-x3D-2-6，在-yml配置文件中进行配置，不然会报错" class="headerlink" title="3：如果 springboot version &gt;&#x3D; 2.6，在.yml配置文件中进行配置，不然会报错"></a><strong>3：如果 springboot version &gt;&#x3D; 2.6，在.yml配置文件中进行配置，不然会报错</strong></h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#接口文档默认环境dev</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">pathmatch:</span></span><br><span class="line">      <span class="comment"># Springfox使用的路径匹配是基于AntPathMatcher的，而Spring Boot 2.6.X使用的是PathPatternMatcher</span></span><br><span class="line">      <span class="comment"># 所以需要配置此参数</span></span><br><span class="line">      <span class="attr">matching-strategy:</span> <span class="string">ant_path_matcher</span></span><br></pre></td></tr></table></figure><p><strong>访问这个路径：</strong>http:&#x2F;localhost:8080&#x2F;api&#x2F;doc.html</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口文档 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2023/07/13/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/07/13/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-Linux-目录结构"><a href="#1-Linux-目录结构" class="headerlink" title="1.Linux 目录结构"></a>1.Linux 目录结构</h1><h3 id="根目录的子目录"><a href="#根目录的子目录" class="headerlink" title="根目录的子目录:"></a>根目录的子目录:</h3><table><thead><tr><th><strong>目录</strong></th><th><strong>内容</strong></th></tr></thead><tbody><tr><td><strong>&#x2F;bin</strong></td><td><strong>bin是Binary的缩写, 这个目录存放着最经常使用的命令，由系统、系统管理员和用户共享</strong></td></tr><tr><td><strong>&#x2F;boot</strong></td><td><strong>这里存放的是启动Linux时使用的一些核心文件，包括一些链接文件以及镜像文件</strong></td></tr><tr><td><strong>&#x2F;dev</strong></td><td><strong>dev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的</strong></td></tr><tr><td>**&#x2F;etc**</td><td><strong>大多数重要的系统配置文件都在&#x2F;etc目录下，该目录包含的数据类似于Windows控制面板中的数据</strong></td></tr><tr><td><strong>&#x2F;home</strong></td><td><strong>普通用户的家目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的</strong></td></tr><tr><td><strong>&#x2F;lib</strong></td><td><strong>库文件，包括系统和用户所需要的各种程序的文件</strong></td></tr><tr><td><strong>&#x2F;lost+found</strong></td><td><strong>每个分区在其上目录中都有一个lost+found。故障期间保存的文件在这里</strong></td></tr><tr><td><strong>&#x2F;media</strong></td><td><strong>linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下</strong></td></tr><tr><td><strong>&#x2F;mnt</strong></td><td><strong>外部文件系统的标准挂载点，例如CD-ROM(光驱)或数码相机</strong></td></tr><tr><td><strong>&#x2F;opt</strong></td><td><strong>通常包含额外的和第三方软件。这是给主机额外安装的大型应用程序所放置的目录</strong></td></tr><tr><td><strong>&#x2F;proc</strong></td><td><strong>包含有关系统资源信息的虚拟文件系统。这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件</strong></td></tr><tr><td><strong>&#x2F;root</strong></td><td><strong>该目录为系统管理员，也称作超级权限者的用户家目录。注意根目录 &#x2F; 和根用户的主目录 &#x2F;root 之间的区别</strong></td></tr><tr><td><strong>&#x2F;sbin</strong></td><td><strong>s就是Super User的意思，这里存放的是系统管理员root使用的系统管理程序</strong></td></tr><tr><td><strong>&#x2F;tmp</strong></td><td><strong>系统使用的临时空间，在重新启动时清理，所以不要使用它来保存任何工作!该目录对于所有用户都可以访问，不要把重要文件放置于该目录</strong></td></tr><tr><td><strong>&#x2F;usr</strong></td><td><strong>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录</strong></td></tr><tr><td><strong>&#x2F;var</strong></td><td><strong>用户创建的所有可变文件和临时文件的存储空间，如日志文件(一般是&#x2F;var&#x2F;log)、邮件队列、打印假脱机程序区、从Internet下载的文件的临时存储空间，或在刻录CD之前保存它的映像。</strong></td></tr></tbody></table><h1 id="2-Linux管理文件和目录的命令"><a href="#2-Linux管理文件和目录的命令" class="headerlink" title="2.Linux管理文件和目录的命令"></a>2.Linux管理文件和目录的命令</h1><table><thead><tr><th>命令</th><th>功能</th><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>pwd</td><td>显示当前目录</td><td>ls</td><td>查看目录下的内容</td></tr><tr><td>cd</td><td>改变所在目录</td><td>cat</td><td>显示文件的内容</td></tr><tr><td>grep</td><td>在文件中查找某字符</td><td>cp</td><td>复制文件</td></tr><tr><td>touch</td><td>创建文件</td><td>mv</td><td>移动文件</td></tr><tr><td>rm</td><td>删除文件</td><td>rmdir</td><td>删除目录</td></tr></tbody></table><h3 id="2-1-pwd命令"><a href="#2-1-pwd命令" class="headerlink" title="2.1 pwd命令"></a>2.1 pwd命令</h3><p>该命令的英文解释为print working directory(打印工作目录)。输入pwd命令，Linux会输出当前目录。</p><h3 id="2-2-cd命令"><a href="#2-2-cd命令" class="headerlink" title="2.2 cd命令"></a>2.2 cd命令</h3><p>cd命令用来改变所在目录。</p><p>cd  &#x2F;      转到根目录中<br>cd  ~     转到&#x2F;home&#x2F;user用户目录下<br>cd  &#x2F;usr 转到根目录下的usr目录中————-绝对路径<br>cd  test 转到当前目录下的test子目录中——-相对路径</p><h3 id="2-3-ls命令"><a href="#2-3-ls命令" class="headerlink" title="2.3 ls命令"></a>2.3 ls命令</h3><p>ls命令用来查看目录的内容。</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-a</td><td>列举目录中的全部文件，包括隐藏文件</td></tr><tr><td>-l</td><td>列举目录中的细节，包括权限、所有者、组群、大小、创建日期、文件是否是链接等</td></tr><tr><td>-f</td><td>列举的文件显示文件类型</td></tr><tr><td>-r</td><td>逆向，从后向前地列举目录中内容</td></tr><tr><td>-R</td><td>递归，该选项递归地列举当前目录下所有子目录内的内容</td></tr><tr><td>-s</td><td>大小，按文件大小排序</td></tr><tr><td>-h</td><td>以人类可读的方式显示文件的大小，如用K、M、G作单位</td></tr><tr><td>ls -l examples.doc</td><td>列举文件examples.doc的所有信息</td></tr></tbody></table><h3 id="2-4-cat命令"><a href="#2-4-cat命令" class="headerlink" title="2.4 cat命令"></a>2.4 cat命令</h3><p>cat命令可以用来合并文件，也可以用来在屏幕上显示整个文件的内容。<br>cat snow.txt 该命令显示文件snow.txt的内容，ctrl+D退出cat。</p><h3 id="2-5-grep命令"><a href="#2-5-grep命令" class="headerlink" title="2.5 grep命令"></a>2.5 grep命令</h3><p>grep命令的最大功能是在一堆文件中查找一个特定的字符串。<br>grep money test.txt<br>以上命令在test.txt中查找money这个字符串，grep查找是区分大小写的。</p><h3 id="2-6-touch命令"><a href="#2-6-touch命令" class="headerlink" title="2.6 touch命令"></a>2.6 touch命令</h3><p>touch命令用来创建新文件，他可以创建一个空白的文件，可以在其中添加文本和数据。<br>touch newfile 该命令创建一个名为newfile的空白文件。</p><h3 id="2-7-cp命令"><a href="#2-7-cp命令" class="headerlink" title="2.7 cp命令"></a>2.7 cp命令</h3><p>cp命令用来拷贝文件，要复制文件，输入命令：<br>cp <source filename> <target filename><br>cp t.txt Document&#x2F;t    该命令将把文件t.txt复制到Document目录下，并命名为t。</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-i</td><td>互动：如果文件将覆盖目标中的文件，他会提示确认</td></tr><tr><td>-r</td><td>递归：这个选项会复制整个目录树、子目录以及其他</td></tr><tr><td>-v</td><td>详细：显示文件的复制进度</td></tr></tbody></table><h3 id="2-8-mv命令"><a href="#2-8-mv命令" class="headerlink" title="2.8 mv命令"></a>2.8 mv命令</h3><p>mv命令用来移动文件。</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-i</td><td>互动：如果选择的文件会覆盖目标中的文件，他会提示确认</td></tr><tr><td>-f</td><td>强制：它会超越互动模式，不提示地移动文件，属于很危险的选项</td></tr><tr><td>-v</td><td>详细：显示文件的移动进度</td></tr></tbody></table><p>例： mv t.txt Document    把文件t.txt 移动到目录Document中。</p><h3 id="2-9-rm命令"><a href="#2-9-rm命令" class="headerlink" title="2.9 rm命令"></a>2.9 rm命令</h3><p>rm命令用来删除文件。</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-i</td><td>互动：提示确认删除</td></tr><tr><td>-f</td><td>强制：代替互动模式，不提示确认删除</td></tr><tr><td>-v</td><td>详细：显示文件的删除进度</td></tr><tr><td>-r</td><td>递归：将删除某个目录以及其中所有的文件和子目录</td></tr></tbody></table><p>例： rm t.txt   该命令删除文件t.txt</p><h3 id="2-10-rmdir命令"><a href="#2-10-rmdir命令" class="headerlink" title="2.10 rmdir命令"></a>2.10 rmdir命令</h3><p>rmdir命令用来删除目录。</p><h1 id="3-有关磁盘空间的命令"><a href="#3-有关磁盘空间的命令" class="headerlink" title="3.有关磁盘空间的命令"></a>3.有关磁盘空间的命令</h1><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>mount</td><td>挂载文件系统</td></tr><tr><td>umount</td><td>卸载已挂载上的文件系统</td></tr><tr><td>df</td><td>检查硬盘的使用量</td></tr><tr><td>du</td><td>显示文件目录和大小</td></tr><tr><td>fsck</td><td>主要是检查和修复Linux文件系统</td></tr></tbody></table><h3 id="3-1-mount命令"><a href="#3-1-mount命令" class="headerlink" title="3.1 mount命令"></a>3.1 mount命令</h3><p>mount命令的功能是挂载文件系统，可以挂载硬盘、光盘、软盘，也可以挂载NFS网络文件系统。这个命令的标准用法如下：<br>mount –t 设备类型 存放目录<br>mount IP地址：&#x2F;所提供的目录 存放目录</p><table><thead><tr><th align="center">选 项</th><th>说明</th></tr></thead><tbody><tr><td align="center">(无)</td><td>不加任何参数，直接输入命令可以显示已挂载的文件系统和目录</td></tr><tr><td align="center">-a</td><td>挂上&#x2F;etc&#x2F;fstab下的全部文件系统</td></tr><tr><td align="center">-t</td><td>制定所挂上来的文件系统的名称，所有系统支持的文件系统，这个信息可以在&#x2F;proc&#x2F;filesystems这个文件里看到</td></tr><tr><td align="center">-n</td><td>挂上文件系统，但是不把文件系统的数据写入&#x2F;etc&#x2F;mtlab这个文件</td></tr><tr><td align="center">-w</td><td>将文件系统设为可读写</td></tr><tr><td align="center">-r</td><td>挂上来的文件系统设为只读</td></tr></tbody></table><p>在目录&#x2F;mnt下，挂上iso9660文件系统。输入命令：<br>mount –t iso9660 &#x2F;dev&#x2F;hdb &#x2F;cdrom</p><h3 id="3-2-umount命令"><a href="#3-2-umount命令" class="headerlink" title="3.2 umount命令"></a>3.2 umount命令</h3><p>umount命令的功能是卸载已挂上的文件系统，在关闭系统前应该把所有挂载上的文件系统卸载。这个命令和mount命令是相对的。用法：<br>umount 已挂上的目录或设备<br>卸载已挂上的&#x2F;cdrom目录，输入命令：<br>umount &#x2F;cdrom<br>卸载已挂上的某个分区，输入命令：<br>umount &#x2F;dev&#x2F;hdb1</p><h3 id="3-3-df命令"><a href="#3-3-df命令" class="headerlink" title="3.3 df命令"></a>3.3 df命令</h3><p>df命令用来检查硬盘分区和已挂在的文件系统的磁盘空间，也就是说，检查硬盘的使用量。标准用法如下：<br>df [-选项]</p><table><thead><tr><th align="center">选项</th><th>功能</th></tr></thead><tbody><tr><td align="center">-a</td><td>把全部的文件系统和各分区的硬盘使用情形列出来，包括0区块的，例如&#x2F;proc这个文件系统</td></tr><tr><td align="center">-i</td><td>列出I-nodes的使用量</td></tr><tr><td align="center">-k</td><td>把各分区的大小和挂上来的文件分区的大小用k表示</td></tr><tr><td align="center">-t</td><td>列出某一文件系统的所有分区磁盘空间使用量</td></tr><tr><td align="center">-x</td><td>列出不是某一文件系统的所有分区磁盘空间使用量，和-t选项相反</td></tr><tr><td align="center">-T</td><td>列出每个分区所属文件系统的名称</td></tr></tbody></table><p>例如，要列出全部文件系统和各分区的磁盘使用情况，输入命令：<br>df –a</p><h3 id="3-4-du命令"><a href="#3-4-du命令" class="headerlink" title="3.4 du命令"></a>3.4 du命令</h3><p>du命令的功能是用于显示文件目录或大小。标准用法：<br>du [-选项]</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-a</td><td>显示全部目录及其次目录下的每个文件所占的磁盘空间</td></tr><tr><td>-b</td><td>显示目录和文件的大小，以B为单位</td></tr><tr><td>-c</td><td>最后再加上一个总计</td></tr><tr><td>-h</td><td>以KB、MB、GB为单位，提高信息可读性</td></tr><tr><td>-s</td><td>只列出各文件大小的总和</td></tr><tr><td>-x</td><td>只计算属于同一文件系统的文件</td></tr></tbody></table><h1 id="4-文件备份和压缩命令"><a href="#4-文件备份和压缩命令" class="headerlink" title="4.文件备份和压缩命令"></a>4.文件备份和压缩命令</h1><p>在Linux中，常用的文件压缩工具有gzip、bzip2、zip。bzip2是最理想的压缩工具，它提供了最大限度的压缩。zip兼容性好，Windows也支持。</p><table><thead><tr><th align="center">命令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">bzip2&#x2F;bunzip2</td><td align="center">扩展名为bz2的压缩&#x2F;解压缩工具</td></tr><tr><td align="center">gzip&#x2F;gunzip</td><td align="center">扩展名为gz的压缩&#x2F;解压缩工具</td></tr><tr><td align="center">zip&#x2F;unzip</td><td align="center">扩展名为zip的压缩&#x2F;解压缩工具</td></tr><tr><td align="center">tar</td><td align="center">创建备份和归档</td></tr></tbody></table><h3 id="4-1-gzip命令"><a href="#4-1-gzip命令" class="headerlink" title="4.1 gzip命令"></a>4.1 gzip命令</h3><p>要使用gzip来压缩文件，输入命令：<br>gzip filename<br>文件即会被压缩，并被保存为filename.gz。<br>要解压缩文件，输入命令：<br>gunzip filename.gz<br>filename.gz会被删除，而以filename代替。<br>gzip -r filename.gz file1 file2 file3 &#x2F;usr&#x2F;work&#x2F;school<br>上面的命令把file1、file2、file3以及&#x2F;usr&#x2F;work&#x2F;school目录中的内容压缩起来放入filename.gz。</p><h3 id="4-2-zip命令"><a href="#4-2-zip命令" class="headerlink" title="4.2 zip命令"></a>4.2 zip命令</h3><p>zip命令的使用方法同gzip。</p><h1 id="5-查看系统信息的命令"><a href="#5-查看系统信息的命令" class="headerlink" title="5.查看系统信息的命令"></a>5.查看系统信息的命令</h1><h3 id="5-1-ps命令"><a href="#5-1-ps命令" class="headerlink" title="5.1 ps命令"></a>5.1 ps命令</h3><p>ps命令用来查看在计算机系统中有哪些程序正在执行，及其执行的情况。这是一个相当强大的命令，可以用它来找出所有的process id和名称。另外，ps命令也可以用来列出所有程序占用内存的情况。用法如下：<br>ps –(选项)</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-l</td><td>用长格式列出</td></tr><tr><td>-u</td><td>列出使用者的名称和使用时间</td></tr><tr><td>-m</td><td>列出内存分布的情况</td></tr><tr><td>-r</td><td>只列出正在执行的前台程序，不列出其他信息</td></tr><tr><td>-x</td><td>列出所有程序，包括那些没有终端机的程序</td></tr></tbody></table><h3 id="5-2-top命令"><a href="#5-2-top命令" class="headerlink" title="5.2 top命令"></a>5.2 top命令</h3><p>top命令可以查看目前程序的执行情景和内存使用。它和ps类似，不过，它会几秒钟更新一次系统状态，方便追踪。要离开这个程序，按Ctrl+C键就可以了。</p><h3 id="5-3-kill命令"><a href="#5-3-kill命令" class="headerlink" title="5.3 kill命令"></a>5.3 kill命令</h3><p>kill命令用来终止一个正在执行中的进程。如果一个程序执行过程中失败了，可以把这个程序终止，避免留在内存中占用系统资源。不过，它的实际意义是送一个信号给这个正在执行的程序，叫它自杀。可以送很多信号给这些程序，也可以让他们受到信号后做很多事情。标准用法：<br>kill –(选项) pid<br>在执行kill命令前。可以先用ps命令查一下某宕掉程序的pid，然后使用kill除去某个程序。例如，终止pid为90的程序：<br>kill 90</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-l</td><td>列出所有可用的信号名称</td></tr><tr><td>-p</td><td>印出pid并不发送信号</td></tr><tr><td>-signal</td><td>其中可用的讯号有 HUP (1), KILL (9), TERM (15), 分别代表著重跑, 砍掉, 结束</td></tr></tbody></table><p>将 pid 为 323 的行程砍掉 (kill) ：<br>kill -9 323<br>将 pid 为 456 的行程重跑 (restart) ：<br>kill -HUP 456</p><h1 id="6-管理使用者和设立权限的命令"><a href="#6-管理使用者和设立权限的命令" class="headerlink" title="6.管理使用者和设立权限的命令"></a>6.管理使用者和设立权限的命令</h1><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>chmod</td><td>用来改变权限</td></tr><tr><td>su</td><td>用来修改用户</td></tr></tbody></table><h3 id="6-1-chmod命令"><a href="#6-1-chmod命令" class="headerlink" title="6.1 chmod命令"></a>6.1 chmod命令</h3><p>chmod命令用来改变权限。读取、写入和执行是许可权限中的三个主要设置。因为用户在他们的账号被创建时就被编入一个组群，所以还可以指定那些组群可以读取、写入或执行某一文件。其中：<br>r—文件可以被读取<br>w—文件可以被写入<br>x—文件可以被执行，如果文件是程序的话<br>可以使用带有-l的ls命令来仔细查看一个文件的许多细节。<br>chmod命令用来设定文件的权限。标准用法：<br>chmod 文件的使用者(u,g,o,a)增减(+,-,&#x3D;)权限名称(r,w,x) 文件</p><table><thead><tr><th>文件的使用者</th><th>说明</th><th>权限</th><th>说明</th><th>增减</th><th>说明</th></tr></thead><tbody><tr><td>u</td><td>拥有文件的用户</td><td>r</td><td>读取权</td><td>+</td><td>添加权限</td></tr><tr><td>g</td><td>所有者所在的组群</td><td>w</td><td>写入权</td><td>-</td><td>删除权限</td></tr><tr><td>o</td><td>其他人</td><td>x</td><td>执行权</td><td>&#x3D;</td><td>是它称为唯一权限</td></tr><tr><td>a</td><td>全部(u,g和o)</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>删除某一文件的所有权限，输入命令：<br>chmod a-rwx test.txt<br>为文件所有者添加权限，输入命令：<br>chmod u+rwx test<br>还可以用数字表示权限：4——读取，2——写入，1——执行。下面的两个命令等价：<br>chmod 751 filename<br>chmod u+rwx,g&#x3D;rx,0&#x3D;x filename</p><h3 id="6-2-su命令"><a href="#6-2-su命令" class="headerlink" title="6.2 su命令"></a>6.2 su命令</h3><p>su命令用来修改用户。这个命令非常重要，它可以让一个普通的使用者拥有超级用户或其他使用者的权限。不过，这个命令必须具有超级用户或其他使用者的口令才能成为超级用户或其他使用者。如果要离开，可以输入exit。标准用法：<br>su 用户名  (如果没有输入用户名则预设为root)<br>举例说明，假设当前用户user01，想要转变为user02，则输入命令：<br>su user02<br>系统返回：<br>password：<br>此时，输入user02的指令，就会变为user02</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub+PicGo搭建图床</title>
      <link href="/2023/03/03/github%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/03/03/github%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-注册一个Github账号"><a href="#1-注册一个Github账号" class="headerlink" title="1.注册一个Github账号"></a>1.注册一个Github账号</h2><p>首先你需要一个github账号，如果没有的话，先注册。</p><p>github官网地址： <a href="https://link.zhihu.com/?target=https://github.com/">https://github.com/</a></p><h2 id="2-配置Github"><a href="#2-配置Github" class="headerlink" title="2.配置Github"></a>2.配置Github</h2><h3 id="2-1创建一个新仓库，用于存放图片。"><a href="#2-1创建一个新仓库，用于存放图片。" class="headerlink" title="2.1创建一个新仓库，用于存放图片。"></a>2.1创建一个新仓库，用于存放图片。</h3><p>填写仓库名称和描述(描述可不写)，且仓库必须是public的，否则存储的图片不能正常访问。</p><p><img src="https://cdn.staticaly.com/gh/yunhaoyu/blogImage@main/img/1677853992984.png" alt="1677853992984"></p><h3 id="2-2生成一个token，用于picGo访问github"><a href="#2-2生成一个token，用于picGo访问github" class="headerlink" title="2.2生成一个token，用于picGo访问github"></a>2.2生成一个token，用于picGo访问github</h3><p>点击头像，选择Settings</p><p><img src="https://cdn.staticaly.com/gh/yunhaoyu/blogImage@main/img/1677854280636.png" alt="1677854280636"></p><p>选择左侧菜单的Developer settings</p><p><img src="https://cdn.staticaly.com/gh/yunhaoyu/blogImage@main/img/1677854365742.png" alt="1677854365742"></p><p>之后选择左侧Personal access tokens下的Tokens (classic)再点击Generate new token</p><p><img src="https://cdn.staticaly.com/gh/yunhaoyu/blogImage@main/img/1677854535617.png" alt="1677854535617"></p><p>填写Note(随便填个即可)，勾选repo（或者可以全部勾选）</p><p><img src="https://cdn.staticaly.com/gh/yunhaoyu/blogImage@main/img/1677854842981.png" alt="1677854842981"></p><p>注意，生成的token只会显示一次，所以记得单独保存下来。</p><p>至此，Github的配置完成。</p><h2 id="3-下载picGo，并进行配置"><a href="#3-下载picGo，并进行配置" class="headerlink" title="3.下载picGo，并进行配置"></a>3.下载picGo，并进行配置</h2><h3 id="3-1下载"><a href="#3-1下载" class="headerlink" title="3.1下载"></a>3.1下载</h3><p>PicGo下载会比较慢，所以我把下载好的应用放在百度网盘了，但仅有Windows版，可以按需取用。<br> 链接:<a href="https://pan.baidu.com/s/1vSti2Jd5Ma1M3eN0rabQmg">https://pan.baidu.com/s/1vSti2Jd5Ma1M3eN0rabQmg</a> 提取码:v003</p><h3 id="3-2配置"><a href="#3-2配置" class="headerlink" title="3.2配置"></a>3.2配置</h3><p>仓库名：[github用户名]&#x2F;[第一步新建的仓库名称]</p><p>分支：默认master，从2020.10.01开始，github的默认分支名变更为main</p><p>设定token：第一步创建的token</p><p>指定存储路径：可填可不填，可以填img&#x2F;，图片就会存储在img文件夹下</p><p>设定自定义域名：<a href="https://cdn.staticaly.com/gh/[github%E7%94%A8%E6%88%B7%E5%90%8D]/[%E4%BB%93%E5%BA%93%E5%90%8D]@main">https://cdn.staticaly.com/gh/[github用户名]/[仓库名]@main</a> ，注意，此处的分支一定要填写@main，否则默认使用master分支。而现在github创建的默认分支名为main，如果不指定，则会出现图片不能上传的情况。</p><p><img src="https://cdn.staticaly.com/gh/yunhaoyu/blogImage@main/img/1677855566829.png" alt="1677855566829"></p><p>至此，github+picGo的配置完成，可以在上传区进行图片上传了。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+GitHub搭建个人博客</title>
      <link href="/2023/03/01/blog-build/"/>
      <url>/2023/03/01/blog-build/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p><a href="https://hexo.io/zh-cn/">Hexo</a> 是一个静态博客框架，基于 Node.js，将 Markdown 文章通过渲染引擎，生成一个静态网页，再结合 Git 命令（ssh），Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2.准备工作"></a>2.准备工作</h2><p><strong>首先安装必要的软件</strong></p><p><strong>Node.js安装:</strong></p><ul><li>首先去 <a href="https://nodejs.org/en/">Node.js 官网</a> 或者node.js中文版<a href="http://nodejs.cn/%E4%B8%8B%E8%BD%BD">http://nodejs.cn/下载</a> node.js 的安装程序，根据你电脑系统的配置信息，下载对应的安装程序，这里不做过多的介绍。</li></ul><p><strong>Git安装:</strong></p><ul><li>Git官网下载:<a href="https://git-scm.com/">https://git-scm.com/</a> ，具体安装可自行百度，这里不做过多的介绍。</li></ul><h2 id="3-搭建GitHub仓库"><a href="#3-搭建GitHub仓库" class="headerlink" title="3.搭建GitHub仓库"></a>3.搭建GitHub仓库</h2><ul><li><p>注册Github账号,在GitHub官网：<a href="https://github.com/">https://github.com/</a> 上注册一个账号，用户名，密码以及邮箱记清楚。</p></li><li><p>登录github，在github首页 单击头像–&gt; Your repositories，点击New，填写好仓库名等信息后，点击 create repository 即可完成仓库的创建，如下图：</p></li></ul><p><img src="https://cdn.staticaly.com/gh/yunhaoyu/blogImage@main/img/1677675391749.png" alt="1677675391749"></p><p><img src="https://cdn.staticaly.com/gh/yunhaoyu/blogImage@main/img/1677675465254.png" alt="1677675465254"></p><p><img src="https://cdn.staticaly.com/gh/yunhaoyu/blogImage@main/img/1677675831083.png" alt="1677675831083"></p><h2 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4.安装Hexo"></a>4.安装Hexo</h2><ul><li><p>在适合的地方创建一个文件夹，用来存放自己的博客文件，我通常都放在D盘中的Blog文件里。</p></li><li><p>在你的电脑上任意位置，新建一个文件夹，用来存放自己的博客文件，比如我的博客存放位置D:\Project\Blog目录下。</p></li><li><p>在该根目录下，鼠标右击，选择<code>Git Bash Here</code>，打开git的控制台窗口，输入<code>npm i hexo-cli -g</code>安装Hexo。</p></li><li><p>安装完成后，验证是否安装成功，该窗口输入hexo -v验证是否安装成功。</p></li></ul><h2 id="5-生成ssh-keys"><a href="#5-生成ssh-keys" class="headerlink" title="5.生成ssh keys"></a>5.生成ssh keys</h2><ul><li><p>在任意文件夹位置，鼠标右击，选择 Git Bash Here，输入 ssh 检查有没有安装ssh，一般安装完Git后都会默认有ssh。</p></li><li><p>为了能够在本地使用 git 管理 github 上的项目，需要绑定 SSHkey。</p></li><li><p>生成ssh命令： <code>ssh-keygen -t rsa -C &quot;github注册时的邮件地址&quot;</code> ，总共需要敲四次回车。</p></li><li><p>找到 id_rsa.pub 文件，并打开复制里面所有的代码，大致路径： c盘—–&gt;用户——&gt;管理员名称——–&gt;.ssh文件夹下</p></li></ul><p>​        或者 </p><p>​        git bash中输入cat ~&#x2F;.ssh&#x2F;id_rsa.pub下命令，将输出的内容复制到框中，点击确定保存。</p><ul><li>打开github，在头像下面点击settings，在新出的导航栏，找到 ssh，点击后，在新的页面点击 ssh keys 的新建钥匙，新建钥匙的 title（名称）随意起名，如：余白博客，将 id_rsa.pub 文件复制的公钥，粘贴到 key 里面，保存。</li></ul><p><img src="https://cdn.staticaly.com/gh/yunhaoyu/blogImage@main/img/1677684022754.png" alt="1677684022754"></p><ul><li>测试ssh是否绑定成功命令： <code>ssh -T git@github.com</code></li></ul><p><img src="https://cdn.staticaly.com/gh/yunhaoyu/blogImage@main/img/1677677035762.png" alt="1677677035762"></p><h2 id="6-本地博客生成"><a href="#6-本地博客生成" class="headerlink" title="6.本地博客生成"></a>6.本地博客生成</h2><ul><li>在博客文件夹下，右键，选择Git Bash Here，输入初始化博客命令，即可拉取博客相关文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">初始化博客命令：hexo init</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/yunhaoyu/blogImage@main/img/1677684096146.png" alt="1677684096146"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">开启本地服务的命令：hexo s</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/yunhaoyu/blogImage@main/img/1677684123291.png" alt="1677684123291"></p><p>然后浏览器打开 <a href="http://localhost:4000/">http://localhost:4000/</a> ，就可以看到我们的博客，按<code>ctrl+c</code>关闭本地服务器。<br>具体效果如下：</p><p><img src="https://cdn.staticaly.com/gh/yunhaoyu/blogImage@main/img/1677684164490.png" alt="1677684164490"></p><h2 id="7-发布博客到互联网"><a href="#7-发布博客到互联网" class="headerlink" title="7.发布博客到互联网"></a>7.发布博客到互联网</h2><ul><li>修改-config.yml文件</li></ul><p><img src="https://cdn.staticaly.com/gh/yunhaoyu/blogImage@main/img/1677678439231.png" alt="1677678439231"></p><ul><li>将改配置文件最后的 deploy 部分完善，type和 branch 是固定不变的，repository修改为你的 github 地址  - 注意：注意网址前面，冒号后面有一个空格</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">你的github仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/yunhaoyu/blogImage@main/img/1677684297037.png" alt="1677684297037"></p><ul><li>你的github仓库地址：</li></ul><p><img src="https://cdn.staticaly.com/gh/yunhaoyu/blogImage@main/img/1677678669689.png" alt="1677678669689"></p><ul><li><p>在博客文件夹下，右键，选择Git Bash Here，</p></li><li><p>安装 <code>hexo-deployer-git</code> </p></li><li><p>自动部署发布工具： <code>npm install hexo-deployer-git --save</code></p></li><li><p>安装好了以后再输入<code>hexo g</code>生成静态网页，再输入<code>hexo d</code>上传到GitHub</p></li><li><p>在输入<code>hexo d</code>后，会让我们验证账户(由于网络原因，如果报错，再次输入hexo s，重复操作)，根据提示进行操作即可，会用到 tokens 进行验证，具体不再展示。</p></li><li><p>文件都上传到github仓库，即完成发布，可以通过网址<a href="https://yunhaoyu.github.io/">https://yunhaoyu.github.io/</a> (当初设置的仓库名)</p><p>进行访问个人博客，效果如下：</p></li></ul><p><img src="https://cdn.staticaly.com/gh/yunhaoyu/blogImage@main/img/1677679776034.png" alt="1677679776034"></p><p>当然，这仅仅是基础的初始化博客完成，后面可以进行美化操作，使博客页面看起来更加美观。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
